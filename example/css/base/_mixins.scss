

@mixin triangle($width, $height, $direction, $color) {
    // Right/East
    @if $direction == e {
        border-top: $height/2 solid transparent;
        border-bottom: $height/2 solid transparent;
        border-left: $width solid $color;
    }

    // Left/West
    @if $direction == w {
        border-top: $height/2 solid transparent;
        border-bottom: $height/2 solid transparent;
        border-right: $width solid $color;
    }

    // Up/North
    @if $direction == n {
        border-left: $width/2 solid transparent;
        border-right: $width/2 solid transparent;
        border-bottom: $height solid $color;
    }

    // Down/South
    @if $direction == s {
        border-left: $width/2 solid transparent;
        border-right: $width/2 solid transparent;
        border-top: $height solid $color;
    }

}

@mixin borderBox {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin removeFirstChildMargins {
    > *:first-child {
        margin-top: 0;
        > *:first-child {
            margin-top: 0;
        }
    }
}

@mixin removeLastChildMargins {
    > *:last-child {
        margin-bottom: 0;
        > *:last-child {
            margin-bottom: 0;
        }
    }
}

// Relies on Modernizr
@mixin svg-and-fallback($svg, $fallback) {
    .svg & {
        background-image: url($svg);
    }
    .no-svg & {
        background-image: url($fallback);
    }
}

@mixin bg-img-none {
    .svg & {
        background-image: none;
    }
    .no-svg & {
        background-image: none;
    }
}

%bg-img-none {
    @include bg-img-none;
}

@mixin ie8-box-shadow {
    .no-boxshadow & {
        border: 1px solid #CCC;
        outline: 1px solid #F0F0F0;
    }
}

.ie8-box-shadow {
    @include ie8-box-shadow;
}

@mixin gradient($from, $to, $fallback) {
    background: $fallback;
    background: -moz-linear-gradient(top, $from 0%, $to 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from), color-stop(100%,$to));
    background: -webkit-linear-gradient(top, $from 0%,$to 100%);
    background: -o-linear-gradient(top, $from 0%,$to 100%);
    background: -ms-linear-gradient(top, $from 0%,$to 100%);
    background: linear-gradient(to bottom, $from 0%,$to 100%);
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr='#{$from}', endColorstr='#{$to}');
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient (GradientType=0, startColorstr='#{$from}', endColorstr='#{$to}')";
}

@mixin rotate($degrees) {
    -moz-transform: rotate(#{$degrees}deg);
    -o-transform: rotate(#{$degrees}deg);
    -webkit-transform: rotate(#{$degrees}deg);
    -ms-transform: rotate(#{$degrees}deg);
    transform: rotate(#{$degrees}deg);

    // Convert from radians to degrees
    $pi: 3.1415926535897;
    $radians: $degrees * $pi / 180;

    $x: $radians;

    // IE6â€“IE9
    filter: progid:DXImageTransform.Microsoft.Matrix(M11=#{cos($x)}, M12=#{-1*sin($x)},M21=#{sin($x)}, M22=#{cos($x)}, sizingMethod='auto expand');
    zoom: 1;
}


@mixin width($context, $target) {
    width: percentage($target / $context);
}

// Tables

@mixin table-row-variant($state, $background) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table > thead > tr,
  .table > tbody > tr,
  .table > tfoot > tr {
    > td.#{$state},
    > th.#{$state},
    &.#{$state} > td,
    &.#{$state} > th {
      background-color: $background;
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover > tbody > tr {
    > td.#{$state}:hover,
    > th.#{$state}:hover,
    &.#{$state}:hover > td,
    &:hover > .#{$state},
    &.#{$state}:hover > th {
      background-color: darken($background, 5%);
    }
  }
}
